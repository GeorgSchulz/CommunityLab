# Variable to decide for IDE Non-HA or IDE HA setup
ide_ha_setup: "{{ true if (groups.masters | length == 3) else false }}"

# Used Domain
domain: "example.com"
  
# Technical groups of IDE
ide_services_group: "ide_services"
ide_services_gid: "4001"
ldap_group: "{{ ide_services_group }}"
zookeeper_group: "{{ ide_services_group }}"
hdfs_group: "{{ ide_services_group }}"
yarn_group: "{{ ide_services_group }}"
jupyterhub_group: "{{ ide_services_group }}"
journalnode_group: "{{ ide_services_group }}"

technical_groups:
  - name: "{{ ide_services_group }}"
    gid: "4001"
  - name: "ssl-cert"
    gid: "4002"

# Technical users of IDE
ldap_user: "openldap"
zookeeper_user: "zookeeper"
hdfs_user: "hdfs"
yarn_user: "yarn"
jupyterhub_user: "jupyterhub"
journalnode_user: "journalnode"

technical_users:
  - name: "{{ ldap_user }}"
    uid: "5001"
    group: "{{ ldap_group }}"
    gid: "{{ ide_services_gid }}"
  - name: "{{ zookeeper_user }}"
    uid: "5002"
    group: "{{ zookeeper_group }}"
    gid: "{{ ide_services_gid }}"
  - name: "{{ hdfs_user }}"
    uid: "5003"
    group: "{{ hdfs_group }}"
    gid: "{{ ide_services_gid }}"
  - name: "{{ yarn_user }}"
    uid: "5004"
    group: "{{ yarn_group }}"
    gid: "{{ ide_services_gid }}"
  - name: "{{ jupyterhub_user }}"
    uid: "5005"
    group: "{{ jupyterhub_group }}"
    gid: "{{ ide_services_gid }}"
  - name: "{{ journalnode_user }}"
    uid: "5006"
    group: "{{ journalnode_group }}"
    gid: "{{ ide_services_gid }}"

# E-mail address that will be used by Certbot for issuing all Let's Encrypt certificates, this is just an example must be a valid address in order for Certbot to issue certificates successfully
my_email: "communitylab@example.com"

# Location of issued Let's Encrypt certificates on localhost - available after Ansible Role tls.certbot.issue
certs_source: 
  - "/opt/letsencrypt/{{ inventory_hostname }}/cert1.pem"
  - "/opt/letsencrypt/{{ inventory_hostname }}/chain1.pem"
  - "/opt/letsencrypt/{{ inventory_hostname }}/privkey1.pem"

# Names of issued Let's Encrypt certificates on remote hosts - used for Ansible Role tls.certbot.distribute
certs_dest:
  - "cert.pem"
  - "chain.pem"
  - "key.pem"

# Mode of issued Let's Encrypt certificates on remote hosts - used for Ansible Role tls.certbot.distribute
certs_mode:
  - "0660"
  - "0660"
  - "0400"

# Names of Let's Encrypt certificates for PostgreSQL cluster- used for Ansible Role rdbms.postgres.install
certs_dest_postgres:
  - "cert_postgres.pem"
  - "chain_postgres.pem"
  - "key_postgres.pem"

# Parameters for TLS
cert_file: "/etc/ssl/private/cert.pem"
key_file: "/etc/ssl/private/key.pem"
haproxy_pem_file: "/etc/ssl/private/haproxy.pem"
cert_file_postgres: "/etc/ssl/private/cert_postgres.pem"
key_file_postgres: "/etc/ssl/private/key_postgres.pem"
chain_file_postgres: "/etc/ssl/private/chain_postgres.pem"
keystore_file: "/etc/ssl/private/{{ inventory_hostname }}.jks"
keystore_password: "changeit"
truststore_file: "/etc/ssl/certs/truststore.jks"
truststore_password: "changeit"

# Parameters when connecting to LDAP server
ldap_organization: "dc=example,dc=com"
ldap_server_address: "{% for host in groups.securities | shuffle %}ldaps://{{ host }}:636{% if not loop.last %},{% endif %}{% endfor %}"
ldap_bind_user: "cn=admin,{{ ldap_organization }}"
ldap_password: "changeit"
ldap_user_search_base: "ou=people,{{ ldap_organization }}"
ldap_group_search_base: "ou=groups,{{ ldap_organization }}"
ldap_bind_dn_template: "uid={username},{{ ldap_user_search_base }}"

# LDAP group used for IDE access
ide_users_group: "ide_users"
ide_users_gid: "5001"

# LDAP users to create for IDE usage
ldap_users: 
  - name: "teppler"
    uid_number: 6000
    gid_number: "{{ ide_users_gid }}"
    password: albstadt
  - name: "anolle"
    uid_number: 6001
    gid_number: "{{ ide_users_gid }}"
    password: sigmaringen
  - name: "gschulz"
    uid_number: 6002
    gid_number: "{{ ide_users_gid }}"
    password: datascience

# Kerberos
realm: "COMMUNITY.LAB"
realm_password: "changeit"
keytab_folder: "/etc/keytabs"

# Hadoop
hadoop_nameservice: "communitylab"

# PostgreSQL
jupyterhub_user_password: "changeit"
postgres_user_password: "changeit"
repl_user_password: "changeit"

postgres_host: "{{ 'jupyterhub.{{ domain }}' if jupyterhub_domain_ip is defined else groups.hub1[0] }}"
postgres:
  - username: "postgres"
    database: "postgres"
    password: "{{ postgres_user_password }}"
    port: 5432
    hostname: "*"
  - username: "jupyterhub"
    database: "jupyterhub"
    password: "{{ jupyterhub_user_password }}"
    port: 5432
    hostname: "*"
    scheme: "jupyterhub"

# HAProxy
haproxy_admin_password: "changeit"
