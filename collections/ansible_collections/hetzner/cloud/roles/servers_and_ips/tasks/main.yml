- name: block for creating server and inventory on ansible server
  collections:
    - hetzner.hcloud
  tags:
    - server_setup
    - hetzner
  block:
    - name: overwrite ansible inventory hosts file with only ansible host for idempotence
      copy:
        content: |
          all:
            children:
              ansible:
                hosts:
                  localhost
        dest: "{{ playbook_dir }}/inventory"
    
    - name: install pip
      become: yes
      apt:
        name: "python3-pip"
        state: present

    - name: install hcloud-python
      become: yes
      pip:
        name: "hcloud"
        state: present
        umask: "0022"
    
    - name: create defined servers in Hetzner Cloud
      hcloud_server:
        api_token: "{{ hetzner_api_token }}"
        name: "{{ item.name }}"
        server_type: "{{ item.server_type }}"
        image: "{{ item.server_image }}"
        state: present
        location: "{{ item.data_center }}"
        user_data: |
          #cloud-config
          users:
            - name: "{{ ansible_user_id }}"
              groups: users, admin
              sudo: ALL=(ALL) NOPASSWD:ALL
              shell: /bin/bash
              ssh_authorized_keys:
                - "{{ ansible_ssh_public_key }}"
          network:
            config: disabled
      loop: "{{ cloud_servers }}"
      loop_control:
        label: "{{ item.name }}"
    
    - name: get information about server
      hcloud_server_info:
        api_token: "{{ hetzner_api_token }}"
      register: response_server
    
    - name: create a reverse DNS entry for all server
      hcloud_rdns:
        api_token: "{{ hetzner_api_token }}"
        server: "{{ item.name }}"
        dns_ptr: "{{ item.name }}.{{ domain }}"
        ip_address: "{{ item.ipv4_address }}"
        state: present
      loop: "{{ response_server.hcloud_server_info }}"
      loop_control:
        label: "{{ item.name }}"

    - name: create floating IPs for all servers
      hetzner.hcloud.hcloud_floating_ip:
        api_token: "{{ hetzner_api_token }}"
        name: "{{ item.floating_ip }}"
        home_location: "{{ item.data_center }}"
        type: ipv4
        state: present
      loop: "{{ cloud_servers }}"
      loop_control:
        label: "{{ item.floating_ip }}"
    
    - name: create floating IP for HA frontend
      hetzner.hcloud.hcloud_floating_ip:
        api_token: "{{ hetzner_api_token }}"
        name: "jupyterhub"
        home_location: "{{ hetzner_data_center }}"
        type: ipv4
        state: present
      when: jupyterhub_domain_ip is defined
        
    - name: assign floating IPs to created servers
      hetzner.hcloud.hcloud_floating_ip:
        api_token: "{{ hetzner_api_token }}"
        name: "{{ item.floating_ip }}"
        server: "{{ item.name }}"
        type: "ipv4"
        state: present
      loop: "{{ cloud_servers }}"
      loop_control:
        label: "{{ item.floating_ip }}"
    
    - name: assign floating IP for HA frontend to first hub node
      hetzner.hcloud.hcloud_floating_ip:
        api_token: "{{ hetzner_api_token }}"
        name: "jupyterhub"
        server: "hub1"
        type: "ipv4"
        state: present
      when: jupyterhub_domain_ip is defined
    
    - name: get information about floating IPs
      hcloud_floating_ip_info:
        api_token: "{{ hetzner_api_token }}"
      register: response_floating_ips

    - name: configure inventory and variables for Non-HA setup
      include_tasks: configure-non-ha-inventory.yml
      when:
        - ide_ha_setup is defined
        - ide_ha_setup == false
    
    - name: configure inventory and variables for HA setup
      include_tasks: configure-ha-inventory.yml
      when:
        - ide_ha_setup is defined
        - ide_ha_setup
    
    - name: check if created hosts are accessible
      shell: "ansible all -m ping"
      register: ping_cloud_servers
      until: "ping_cloud_servers is not failed"
      retries: 10
      delay: 4
      failed_when: false
    
    - name: print message depending on ansible ping command
      assert:
        that: ping_cloud_servers.rc == 0
        fail_msg: "Created Hosts not reachable from Ansible Server. Check your Hetzner Cloud Console for relevant Hosts and IPs if this still fails after 40 seconds"
        success_msg: "Created Hosts and IPs are created successfully and are reachable from Ansible Server"
